contract Game =\n\n  record state = {\n    owner            : address,\n    total_supply     : int,\n    balances         : map(address, int),\n    name             : string,\n    url              : string,\n    img              : string,\n    description      : string,\n    price            : int,\n    id               : string}\n\n  stateful entrypoint init(n : string, u : string, i : string, d : string, p : int, id2 : string) = {\n    owner = Call.caller,\n    total_supply = 0,\n    balances = {},\n    name = n,\n    url = u,\n    img = i,\n    description = d,\n    price = p,\n    id = id2}\n\n  entrypoint total_supply() : int = state.total_supply\n\n  entrypoint balance_of(who: address) : int = lookup_by_address(who, state.balances, 0)\n  \n  entrypoint get_name() : string = state.name\n  \n  entrypoint get_image() : string = state.img\n\n  entrypoint get_url() : string = state.url\n  \n  entrypoint get_description() : string = state.description\n\n  entrypoint get_price() : int = state.price\n\n  entrypoint get_id() : string = state.id\n\n  stateful entrypoint set_image(i : string) = \n    only_owner()\n    put(state{img = i})\n\n  stateful entrypoint set_name(i : string) = \n    only_owner()\n    put(state{name = i})\n\n  stateful entrypoint set_url(i : string) = \n    only_owner()\n    put(state{url = i})\n\n  stateful entrypoint set_description(i : string) = \n    only_owner()\n    put(state{description = i})\n\n  stateful entrypoint set_price(i : int) = \n    only_owner()\n    put(state{price = i})\n\n  stateful entrypoint set_id(i : string) = \n    only_owner()\n    put(state{id = i})\n\n  stateful entrypoint buyGame() =\n    if(Call.value >= state.price)\n        mint(Call.caller, 1)\n    else\n        Chain.spend(Call.caller, Call.value)\n        abort("Can\'t pay the game, funds")\n\n  stateful entrypoint  withdraw() =\n    only_owner()\n    Chain.spend(Call.caller, Contract.balance)\n\n  stateful entrypoint transfer(to: address, value: int) : bool =\n    transfer\'(Call.caller, to, value)\n\n  private stateful function transfer\'(from: address, to: address, value: int) : bool =\n    require\'(value > 0, "Value is sub zero")\n    require\'(value =< balance_of(from), "Not enough balance")\n    \n    put(state{\n      balances[from] = sub(balance_of(from), value),\n      balances[to] = add(balance_of(to), value)})\n\n    true\n\n  stateful private function mint(account: address, value: int) : bool =\n    put(state{total_supply = add(state.total_supply, value),\n      balances[account] = add(balance_of(account), value)})\n\n    true\n\n  private function add(a : int, b : int) : int =\n    let c : int = a + b\n    require(c >= a, "Error")\n    c\n\n  private function sub(a : int, b : int) : int =\n    require(b =< a, "Error")\n    a - b\n\n  private function require\'(b : bool, err : string) =\n    if(!b)\n      abort(err)\n\n  private function only_owner() =\n    require\'(Call.caller == state.owner, "Only owner can mint!")\n\n  private function lookup_by_address(k : address, m, v) =\n    switch(Map.lookup(k, m))\n      None    => v\n      Some(x) => x\n
